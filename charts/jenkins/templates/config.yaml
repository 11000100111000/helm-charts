{{- $jenkinsHome := .Values.master.jenkinsHome -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "jenkins.fullname" . }}
  namespace: {{ template "jenkins.namespace" . }}
  labels:
    "app.kubernetes.io/name": '{{ template "jenkins.name" .}}'
    "helm.sh/chart": "{{ .Chart.Name }}-{{ .Chart.Version }}"
    "app.kubernetes.io/managed-by": "{{ .Release.Service }}"
    "app.kubernetes.io/instance": "{{ .Release.Name }}"
    "app.kubernetes.io/component": "{{ .Values.master.componentName }}"
data:
  apply_config.sh: |-
{{- if .Values.master.initializeOnce }}
    if [ -f {{ .Values.master.jenkinsHome }}/initialization-completed ]; then
      echo "master was previously initialized, refusing to re-initialize"
      exit 0
    fi
{{- end }}
    echo "applying Jenkins configuration"
    mkdir -p {{ .Values.master.jenkinsRef }}/secrets/;
{{- if .Values.master.enableXmlConfig }}
    echo "apply XML configuration"
    echo "false" > {{ .Values.master.jenkinsRef }}/secrets/slave-to-master-security-kill-switch;
{{- if .Values.master.overwriteConfig }}
    echo "overwriting existing configuration"
  {{- if .Values.master.additionalConfig }}
  {{- range $key, $val := .Values.master.additionalConfig }}
    echo "copying additional configuration"
    cp /var/jenkins_config/{{- $key }} {{ $jenkinsHome }};
  {{- end }}
  {{- end }}
{{- else }}
    echo "copy XML configuration"
  {{- if .Values.master.additionalConfig }}
  {{- range $key, $val := .Values.master.additionalConfig }}
    yes n | cp -i /var/jenkins_config/{{- $key }} {{ $jenkinsHome }};
  {{- end }}
  {{- end }}
{{- end }}
{{- else }}
{{- if .Values.master.JCasC.enabled }}
    echo "disable Setup Wizard"
    # Prevent Setup Wizard when JCasC is enabled
    echo $JENKINS_VERSION > {{ .Values.master.jenkinsHome }}/jenkins.install.UpgradeWizard.state
    echo $JENKINS_VERSION > {{ .Values.master.jenkinsHome }}/jenkins.install.InstallUtil.lastExecVersion
{{- end }}
{{- end }}
{{- if .Values.master.overwritePlugins }}
    echo "remove all plugins from shared volume"
    # remove all plugins from shared volume
    rm -rf {{ .Values.master.jenkinsHome }}/plugins/*
{{- end }}
{{- if .Values.master.installPlugins }}
    echo "download plugins"
    # Install missing plugins
    cp /var/jenkins_config/plugins.txt {{ .Values.master.jenkinsHome }};
    rm -rf {{ .Values.master.jenkinsRef }}/plugins/*.lock
    /usr/local/bin/install-plugins.sh `echo $(cat {{ .Values.master.jenkinsHome }}/plugins.txt)`;
    echo "copy plugins to shared volume"
    # Copy plugins to shared volume
    yes n | cp -i {{ .Values.master.jenkinsRef }}/plugins/* /var/jenkins_plugins/;
{{- end }}
{{- if .Values.master.initScripts }}
    echo "copy init scripts"
    mkdir -p {{ .Values.master.jenkinsHome }}/init.groovy.d/;
    {{- if .Values.master.overwriteConfig }}
    rm -f {{ .Values.master.jenkinsHome }}/init.groovy.d/*.groovy
    {{- end }}
    yes n | cp -i /var/jenkins_config/*.groovy {{ .Values.master.jenkinsHome }}/init.groovy.d/;
{{- end }}
{{- if .Values.master.JCasC.enabled}}
  {{- if not .Values.master.sidecars.configAutoReload.enabled }}
    echo "copy configuration as code files"
    mkdir -p {{ .Values.master.jenkinsHome }}/casc_configs;
    rm -rf {{ .Values.master.jenkinsHome }}/casc_configs/*
    {{- if .Values.master.JCasC.configScripts }}
    cp -v /var/jenkins_config/*.yaml {{ .Values.master.jenkinsHome }}/casc_configs
    {{- end }}
  {{- end }}
{{- end }}
{{- if .Values.master.enableXmlConfig }}
{{- if .Values.master.credentialsXmlSecret }}
    echo "copy credentials.xml"
    yes n | cp -i /var/jenkins_credentials/credentials.xml {{ .Values.master.jenkinsHome }};
{{- end }}
{{- if .Values.master.jobs }}
    echo "copy jobs"
    for job in $(ls /var/jenkins_jobs); do
      mkdir -p {{ .Values.master.jenkinsHome }}/jobs/$job
      yes {{ if not .Values.master.overwriteJobs }}n{{ end }} | cp -i /var/jenkins_jobs/$job {{ .Values.master.jenkinsHome }}/jobs/$job/config.xml
    done
{{- end }}
{{- end }}
{{- if .Values.master.secretsFilesSecret }}
    echo "copy secrets"
    yes n | cp -i /var/jenkins_secrets/* {{ .Values.master.jenkinsRef }}/secrets/;
{{- end }}
    echo "finished initialization"
{{- if .Values.master.initializeOnce }}
    touch {{ .Values.master.jenkinsHome }}/initialization-completed
{{- end }}
{{- range $key, $val := .Values.master.initScripts }}
  init{{ $key }}.groovy: |-
{{ $val | indent 4 }}
{{- end }}
{{- if .Values.master.JCasC.enabled }}
  {{- if not .Values.master.sidecars.configAutoReload.enabled }}
# Only add config to this script if we aren't auto-reloading otherwise the pod will restart upon each config change:
{{- if .Values.master.JCasC.defaultConfig }}
  jcasc-default-config.yaml: |-
    {{- include "jenkins.casc.defaults" . |nindent 4}}
{{- end }}
{{- range $key, $val := .Values.master.JCasC.configScripts }}
  {{ $key }}.yaml: |-
{{ tpl $val $| indent 4 }}
{{- end }}
{{- end }}
{{- end }}
  plugins.txt: |-
{{- if .Values.master.installPlugins }}
  {{- range $installPlugin := .Values.master.installPlugins }}
    {{- $installPlugin | nindent 4 }}
  {{- end }}
  {{- range $addlPlugin := .Values.master.additionalPlugins }}
    {{- /* duplicate plugin check */}}
    {{- range $installPlugin := $.Values.master.installPlugins }}
      {{- if eq (splitList ":" $addlPlugin | first) (splitList ":" $installPlugin | first) }}
        {{- $message := print "[PLUGIN CONFLICT] master.additionalPlugins contains '" $addlPlugin "'" }}
        {{- $message := print $message " but master.installPlugins already contains '" $installPlugin "'." }}
        {{- $message := print $message " Override master.installPlugins to use '" $addlPlugin "' plugin." }}
        {{- fail $message }}
      {{- end }}
    {{- end }}
    {{- $addlPlugin | nindent 4 }}
  {{- end }}
{{- end }}
{{- if .Values.master.additionalConfig }}
{{- toYaml .Values.master.additionalConfig | indent 2 }}
{{- end }}
